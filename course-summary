Model Checking and System Verification

Techniques for ensuring that a computing (hardware + software) system is free of bugs are of utmost importance since vulnerabilities of reactive systems embedded in devices can often cause huge damage in real life.
Hence there is tremendous interest within computer science community and industry to find methods that can also guarantee absence of bugs utraditional unlike esting and simulation, which are limited to only showing presence of bugs.
Model Checking is one such promising method that applies foundational concepts and techniques from symbolic logic and automata theory for formally verifying a model of a system satisfies a desired property for all possible behaviors of the system.
Since its path-breaking Turing-award acknowledged invention in 1986, several technical break-throughs have made model checking a viable technology for design validation in industrial practice while continuing to be pursued as an active research area.
This course covers both the theory and practice of model checking at advanced undergraduate and beginning graduate levels.
The course gives a special emphasis on symbolic model checking with SAT solvers which is the most widely used version in practice and also forms the current research direction in this field.
The course will also give the hand-on exposure to a few state-of-art model checking tools.

Learning Outcomes:
- The basic theory of model checking in propositional temporal logics
- Symbolic Model checking using SAT solvers
- Abstraction and Inductive Techniques to scale model checking
- Practical exercises on symbolic model cheking tools

Targeted Audience:
- 


Model Checking and Systems Verification (MCSV)

Model checking is a method of using techniques from logic and automata for formally verifying that a model of a system (hardware, software or a combination) satisfies certain desired properties.
With active research of over more than a couple of decades since its invention, model checking has gained prominence as several effective effective methodologies and tools have been developed to make it applicable in industrial practice, especially for safety and mission critical systems.
This course covers the theory, techniques, and methods underlying modern-day model checkers, while giving hands-on exposure to using a couple state-of-art model checking tools.  The main topics covered by the course include the following:

1. Formal modeling of computational systems and their properties

2. Formalisms (omega-regular languages, LTL and CTL) for specifying system properties

3. Buchi-Automata and its use for MC

4. Symbolic Model Checking

5. Hands-on exposure to two state-of-art tools: NuSMV and CBMC

6. Inductive and Abstraction techniques to scale MC

Required Background: Discrete Mathematics, propositional logic, introduction to programming

Desired Background: Automata theory, Theory of computation, Algorithms


******************

Model Checking and Systems Verification (MCSV)

Formal SW/HW systems verification using model checking (MC) is gaining importance in practice with increasing use of embedded systems in safety-critical applications.  This course covers the theory, techniques, and methods underlying modern-day model checkers, while giving hands-on exposure to using a couple state-of-art model checking tools.  The main topics covered by the course include the following:

1. Formal modeling of computational systems and their properties

2. Formalisms (omega-regular languages, LTL and CTL) for specifying system properties

3. Buchi-Automata and its use for MC

4. Symbolic Model Checking

5. Hands-on exposure to two state-of-art tools: NuSMV and CBMC

6. Inductive and Abstraction techniques to scale MC

Required Background: Discrete Mathematics, propositional logic, introduction to programming

Desired Background: Automata theory, Theory of computation, Algorithms


